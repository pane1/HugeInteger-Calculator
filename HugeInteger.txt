/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg2si4.lab.pkg1;

import java.util.Arrays;
import java.util.Random;
/**
 *
 * @author ericp
 */
public class HugeInteger {
    private String str;
    private int[] num;
    private char chart;
    private int neg = 0;
    Random rand = new Random();
    
    //creates a HugeInteger type for a certain number
    public HugeInteger(String val){
        if(val.charAt(0) == 45){
            val = val.substring(1,val.length());
            neg = 1;
        }
        num = new int[val.length()];
        //checks if the string contains only numbers
        for(int i = 0; i < val.length(); i++){
            if(val.charAt(i) < 48 || val.charAt(i) > 57){
                System.out.println("Your input is invalid");
                System.exit(0);
            }
            else{
                num[i] = val.charAt(i) - 48;
            }
        }	
        //System.out.println(this.neg);
    }
    
    //creates a random HugeInteger type with n-length
    public HugeInteger(int n){
        //checks if n is larger then 1
        if(n == 0){
            System.out.println("Your input is invalid");
            System.exit(0);
        }
        else{
            for(int i = 0; i < n; i++){
                num = new int[n];
                if(i == 0){
                    num[i] = rand.nextInt(9) + 1;
                }
                else{
                    num[i] = rand.nextInt(10);
                }
            }
        }
    }
    
    //adds 2 HugeInteger type 
    public HugeInteger add(HugeInteger h){
        int len1 = this.num.length;
        int len2 = h.num.length;
        int carry = 0;
        int borrow = 0;
        HugeInteger newNum = new HugeInteger("0");
    
        //checks if either have negatives
        if((this.neg == 1 && h.neg == 0) || (this.neg == 0 && h.neg == 1)){
            //makes all the appropriate numbers in "this" or "h" to be negative
            if(this.neg == 1 && h.neg == 0){
                for(int i = 0; i < len1; i++){
                    this.num[i] = this.num[i] * -1;
                }
            }
            else if(this.neg == 0 && h.neg == 1){
                for(int i = 0; i < len2; i++){
                    h.num[i] = h.num[i] * -1;
                }
            }
            //for when the negative numbers have the same length
            if(len1 == len2){
                //declaring length of the new HugeInteger
                newNum.num = new int[len1];
                
                //adding the negative and positive numbers
                for(int i = len1 - 1; i >= 0; i--){
                    //when your adding the non-leading numbers when a borrow is needed
                    if(Math.abs(this.num[i]) < Math.abs(h.num[i]) && this.num[i] != 0 && i != 0 && this.neg == 1){
                        newNum.num[i] = (this.num[i] + -10 + borrow) + h.num[i];
                        borrow = 1;
                        
                    }
                    //when your adding the non-leading numbers when a borrow is needed
                    else if(Math.abs(this.num[i]) < Math.abs(h.num[i]) && this.num[i] != 0 && i != 0 && h.neg == 1){
                        newNum.num[i] = (this.num[i] + 10 - borrow) + h.num[i];
                        borrow = 1;
                    }
                    //when your adding the non-leading numbers
                    else if(this.neg == 1){
                        newNum.num[i] = (this.num[i] + borrow) + h.num[i];
                        borrow = 0;
                    }
                    //when your adding the non-leading numbers
                    else if(h.neg == 1){
                        newNum.num[i] = (this.num[i] - borrow) + h.num[i];
                        borrow = 0;
                    }
                }
            }
            //for when "this" is longer for negative numbers
            else if(len1 > len2){
                //declaring length of the new HugeInteger
                newNum.num = new int[len1];
 
                //adding the negative and positive numbers
                for(int i = len2 - 1; i >= 0; i--){      
                    if(Math.abs(this.num[(len1 - len2) + i]) < Math.abs(h.num[i]) && this.neg == 1){
                        newNum.num[(len1 - len2) + i] = (this.num[(len1 - len2) + i] + -10 + borrow) + + h.num[i];
                        borrow = 1;
                    }
                    else if(Math.abs(this.num[(len1 - len2) + i]) < Math.abs(h.num[i]) && h.neg == 1){
                        newNum.num[(len1 - len2) + i] = (this.num[(len1 - len2) + i] + 10 - borrow) + + h.num[i];
                        borrow = 1;
                    }
   
                    else if(this.neg == 1){
                        newNum.num[(len1 - len2) + i] = (this.num[(len1 - len2) + i] + borrow) + h.num[i];
                        borrow = 0;
                    }
                    else if(h.neg == 1){
                        newNum.num[(len1 - len2) + i] = (this.num[(len1 - len2) + i] - borrow) + h.num[i];
                        borrow = 0;
                    }
                }
                //move down the leading numbers 
                for(int i = (len1 - len2) - 1; i >= 0; i--){
                    if(this.neg == 1){
                        newNum.num[i] = this.num[i] + borrow;
                    }
                    else if(h.neg == 1){
                        newNum.num[i] = this.num[i] - borrow;
                    }
                    else{
                        newNum.num[i] = this.num[i];
                    }
                }
            }
            //for when "h" is longer for negative numbers
            else{
                //declaring length of the new HugeInteger
                newNum.num = new int[len2];
                
                //adding the negative and positive numbers
                for(int i = len1 - 1; i >= 0; i--){      
                    if(Math.abs(this.num[i]) > Math.abs(h.num[(len2 - len1) + i]) && this.neg == 1){
                        newNum.num[(len2 - len1) + i] = this.num[i] + (h.num[(len2 - len1) + i] + 10 - borrow);
                        borrow = 1;   
                    }
                    else if(Math.abs(this.num[i]) > Math.abs(h.num[(len2 - len1) + i]) && h.neg == 1){
                        newNum.num[(len2 - len1) + i] = this.num[i] + (h.num[(len2 - len1) + i] + -10 + borrow);
                        borrow = 1;
                    }
                    else if(this.neg == 1){
                        newNum.num[(len2 - len1) + i] = this.num[i] + (h.num[(len2 - len1) + i] - borrow);
                        borrow = 0;  
                    }
                    else if(h.neg == 1){
                        newNum.num[(len2 - len1) + i] = this.num[i] + (h.num[(len2 - len1) + i] + borrow);
                        borrow = 0;
                    }
                }
                //moving down the leading numbers
                for(int i = (len2 - len1) - 1; i >= 0; i--){
                    if(this.neg == 1){
                        newNum.num[i] = h.num[i] - borrow;
                    }
                    else if(h.neg == 1){
                        newNum.num[i] = h.num[i] + borrow;
                    }
                    else{
                        newNum.num[i] = h.num[i];
                    }
                }
            }
            
        }
        //for when neither or both have negatives
        else{
            //for when it's bother negatives
            if(this.neg == 1 && h.neg == 1){
                newNum.neg = 1;
            }
            //adding when 2 HugeInteger length are the same
            if(len1 == len2){
                //declaring length of the new HugeInteger
                newNum.num = new int[len1];

                //calculating the numbers
                for(int i = len1 - 1; i >= 0; i--){
                    newNum.num[i] = this.num[i] + h.num[i] + carry;
                    //handles the carry in the calculations
                    if(this.num[i] + h.num[i] + carry >= 10 && i != 0){
                        newNum.num[i] = (this.num[i] + h.num[i] + carry) % 10;
                        carry = 1;
                    }
                    else{
                        carry = 0;
                    }
                }
            }
            //adding when this.HugeInteger length is larger
            else if(len1 > len2){
                //declaring length of the new HugeInteger
                newNum.num = new int[len1];
                
                //calculating the number that needs to be added
                for(int i = len2 - 1; i >= 0; i--){
                    newNum.num[(len1 - len2) + i] = this.num[(len1 - len2) + i] + h.num[i] + carry;
                    //handles the carry in the calculations
                    if(this.num[(len1 - len2) + i] + h.num[i] + carry >= 10){
                        newNum.num[(len1 - len2) + i] = (this.num[(len1 - len2) + i] + h.num[i] + carry) % 10;
                        carry = 1;
                    }
                    else{
                        carry = 0;
                    }
                }
                //moving the necessary numbers "down" when nothing is added
                for(int i = (len1 - len2) - 1; i >= 0; i--){
                    newNum.num[i] = this.num[i] + carry;

                    //checks if a carry needs to be added to the rest of the this.num 
                    if(this.num[i] + carry >= 10 & i != 0){
                        newNum.num[i] =(this.num[i] + carry) % 10;
                        carry = 1;
                    }
                    else{
                        carry = 0;
                    }
                }
            }
            //adding when h.HugeInteger length is larger
            else{
                //declaring length of the new HugeInteger
                newNum.num = new int[len2];
                
                //calculating the number that needs to be added
                for(int i = len1 - 1; i >= 0; i--){
                    newNum.num[(len2 - len1) + i] = this.num[i] + h.num[(len2 - len1) + i] + carry;
                    //handles the carry of the calculations
                    if(this.num[i] + h.num[(len2 - len1) + i] + carry >= 10){
                        newNum.num[(len2 - len1) + i] = (this.num[i] + h.num[(len2 - len1) + i] + carry) % 10;
                        carry = 1;
                    }
                    else{
                        carry = 0;
                    }
                }
                //moving the necessary numbers "down" when nothing is added
                for(int i = (len2 - len1) - 1; i >= 0; i--){
                    newNum.num[i] = h.num[i] + carry;
                    //checks if a carry needs to be added to the rest of the this.num
                    if(h.num[i] + carry >= 10 & i != 0){
                        newNum.num[i] =(h.num[i] + carry) % 10;
                        carry = 1;
                    }
                    else{
                        carry = 0;
                    }
                }
            }
        }
        
        return newNum;
    }
    
    //subtract 2 HugeInteger type 
    public HugeInteger subtract(HugeInteger h){
        int len1 = this.num.length;
        int len2 = h.num.length;
        int borrow = 0;

        int temp_neg = 0;
        HugeInteger temp_high = new HugeInteger("0");
        HugeInteger temp_low = new HugeInteger("0");
        
        HugeInteger newNum = new HugeInteger("0");
        
        int this_counter = 0;
        int h_counter = 0;

        //finding the leading zeros
        while(this.num[this_counter] == 0){
            this_counter++;
        }
        while(h.num[h_counter] == 0){
            h_counter++;
        }
        
        //eliminating the leading zeros
        int[] temp_this = new int[this.num.length - this_counter];
        int[] temp_h = new int[h.num.length - h_counter];
        
        for(int i = 0; i < this.num.length - this_counter; i++){
            temp_this[i] = this.num[this_counter + i];
        }
        for(int i = 0; i < h.num.length - h_counter; i++){
            temp_h[i] = h.num[h_counter + i];
        }
        
        //setting the new integer array
        this.num = temp_this;
        h.num = temp_h;
        
        //when this is negative
        if(this.neg == 1 && h.neg == 0){
            this.neg = 0;
            newNum = this.add(h);
            newNum.num[0] = newNum.num[0] * -1;
        }
        //when h is negative
        else if(this.neg == 0 && h.neg == 1){
            h.neg = 0;
            newNum = this.add(h);
        }
        //when both number are negative
        else if(this.neg == 1 && h.neg == 1){
            this.neg = 0;
            h.neg = 0;
            
            newNum = this.subtract(h);
            
            if(newNum.neg == 1){
                newNum.neg = 0;
            }
            else if(newNum.neg == 0){
                newNum.neg = 1;
            }
        }
        //when both numbers are positive
        else{
            //subtracting 2 HugeIntegers are the same length
            if(len1 == len2){
                newNum.num = new int[len1];

                //checking which one is larger and this would determine if the result is negative
                if(this.compareTo(h) == -1){
                    temp_high = h;
                    temp_low = this;
                    temp_neg = 1;
                }
                else if(this.compareTo(h) == 1){
                    temp_high = this;
                    temp_low = h;
                    temp_neg = 0;
                }
                else{
                    temp_high = this;
                    temp_low = h;
                    temp_neg = 0;
                }
                //does the calculation of the higher number - lower number
                for(int i = len1 - 1; i >= 0; i--){
                    if(temp_high.num[i] < temp_low.num[i] && i != 0){
                        newNum.num[i] = (temp_high.num[i] + 10) - temp_low.num[i] - borrow;
                        borrow = 1; 
                    }
                    else{
                        newNum.num[i] = temp_high.num[i] - temp_low.num[i] - borrow;
                        borrow = 0;
                    }
                }

                //checks if the subtraction results then you would make it into a negative result
                for(int i = 0; i < newNum.num.length; i++){
                    if(temp_neg == 1 && newNum.num[i] != 0){
                        newNum.num[i] = newNum.num[i] * -1;
                        newNum.neg = 1;
                        break;
                    }
                }
            }
            //subtracting when this.num is larger
            else{
                //checking which one is larger and this would determine if the result is negative
                if(this.compareTo(h) == -1){
                    temp_high = h;
                    temp_low = this;
                    temp_neg = 1;
                }
                else if(this.compareTo(h) == 1){
                    temp_high = this;
                    temp_low = h;
                    temp_neg = 0;
                }
                newNum.num = new int[temp_high.num.length];

                //does the calculation of the higher number - lower number
                for(int i = temp_low.num.length - 1; i >= 0; i--){
                    System.out.println(temp_low.num[i]);
                    if(temp_high.num[(temp_high.num.length - temp_low.num.length) + i] < temp_low.num[i]){
                        newNum.num[(temp_high.num.length - temp_low.num.length) + i] = (temp_high.num[(temp_high.num.length - temp_low.num.length) + i] + 10) - temp_low.num[i] - borrow;
                        borrow = 1; 
                    }
                    else{
                        newNum.num[(temp_high.num.length - temp_low.num.length) + i] = temp_high.num[(temp_high.num.length - temp_low.num.length) + i] - temp_low.num[i] - borrow;
                        borrow = 0;
                    }
                }

                //moving the remaining numbers down
                for(int i = 0; i < temp_high.num.length - temp_low.num.length; i++){
                    newNum.num[i] = temp_high.num[i] - borrow;
                    borrow = 0;
                }
                //checks if the subtraction results then you would make it into a negative result
                for(int i = 0; i < newNum.num.length; i++){
                    if(temp_neg == 1 && newNum.num[i] != 0){
                        newNum.num[i] = newNum.num[i] * -1;
                        newNum.neg = 1;
                        break;
                    }
                }
            }
        }
        return newNum;
    }
    
    HugeInteger multiply(HugeInteger h){
        HugeInteger newNum = new HugeInteger("0");
        
        int len1 = this.num.length;
        int len2 = h.num.length;
        
        int[] num1;
        int[] num2;
        int carry = 0;
        int this_counter = 0;
        int h_counter = 0;
        
         //finding the leading zeros
        while(this.num[this_counter] == 0){
            this_counter++;
        }
        while(h.num[h_counter] == 0){
            h_counter++;
        }
        
        //eliminating the leading zeros
        int[] temp_this = new int[this.num.length - this_counter];
        int[] temp_h = new int[h.num.length - h_counter];
        
        for(int i = 0; i < this.num.length - this_counter; i++){
            temp_this[i] = this.num[this_counter + i];
        }
        for(int i = 0; i < h.num.length - h_counter; i++){
            temp_h[i] = h.num[h_counter + i];
        }
        
        //setting the new integer array
        this.num = temp_this;
        h.num = temp_h;
        
        if(this.compareTo(h) == 1){
            num1 = this.num;
            num2 = h.num;
        }
        else if(this.compareTo(h) == -1){
            num1 = h.num;
            num2 = this.num;
        }
        else{
            num1 = this.num;
            num2 = h.num;
        }

        int num1_counter = num1.length;
        int num2_counter = num2.length;
        
        int col = num1_counter + num2_counter;
        int row = num2_counter;

        int[][] product = new int[row][col];
        
        int col_it = col - 1;
        int row_it = row - 1;
        int row_counter = 0;
        num1_counter = num1_counter - 1;
        num2_counter = num2_counter - 1;
        
        while(row_it != -1){
            while(col_it != -1){
                if(row_counter > 0 && col_it == col - 1){
                    for(int i = row_counter; i > 0; i--){
                        product[row_it][row_counter] = 0;
                    }
                    col_it = col_it - row_counter;            
                }
                if(num1[num1_counter] * num2[num2_counter] >= 10 && col_it != 0){
                    product[row_it][col_it] = (num1[num1_counter] * num2[num2_counter] + carry) % 10;
                    carry = (num1[num1_counter] * num2[num2_counter]) / 10;
                }
                else{
                    product[row_it][col_it] = num1[num1_counter] * num2[num2_counter] + carry;
                    carry = 0;
                }
                col_it--;
                if(num1_counter > 0){
                    num1_counter--;
                }
                else{
                    product[row_it][col_it] = carry;
                    carry = 0;
                    break;
                }
            }
            col_it = col - 1;
            num1_counter = num1.length - 1;
            num2_counter--;
            row_it--;
            row_counter++;
            
        }
        row_it = row - 1;
        int[] f_product = new int[col];
        Arrays.fill(f_product, 0);
        int product_carry = 0;
        int temp;

        for(int i = col_it; i >= 0; i--){
            for(int j = row_it; j >= 0; j--){
                f_product[i] += product[j][i];
            }
            f_product[i] += product_carry;           
            if(f_product[i] >= 10 && i != 0){
                temp = f_product[i];
                f_product[i] = (f_product[i] + carry) % 10;
                product_carry = temp/10;
            }
            else{
                product_carry = 0;
            }
        }
        if(this.neg == 1 && h.neg == 1){
            newNum.neg = 0;
        }
        else if(this.neg == 0 && h.neg == 0){
            newNum.neg = 0;
        }
        else if(this.neg == 1 && h.neg == 0){
            newNum.neg = 1;
        }
        else if(this.neg == 0 && h.neg == 1){
            newNum.neg = 1;
        }
        newNum.num = f_product;
        return newNum;
    }
    
    //returns a value depending on which HugeInteger is larger or if they were equal
    public int compareTo(HugeInteger h){
        int compare = 0;
        int this_counter = 0;
        int h_counter = 0;
        int counter = 0;
        int len1 = this.num.length;
        int len2 = h.num.length;

        if(this.neg == 1 && h.neg == 0){
            compare = -1;
        }
        else if(this.neg == 0 && h.neg == 1){
            compare = 1;
        }
        else{
            //checks if their are any leading zeros 
            while(this.num[this_counter] == 0 && this_counter < len1 - 1){
                this_counter++;
            }
            if(this_counter == 0 && len1 == 1){
                this_counter = 0;
            }
            while(h.num[h_counter] == 0 && h_counter < len2 - 1){
                h_counter++;
            }
            if(h_counter == 0 && len2 == 1){
                h_counter = 0;
            }
            
            //check if both number are positive or negative, reverse the logic is value for negative numbers (closer to zero is larger)
            if(this.neg == 1 && this.neg == 1){
                //temps to hold the new array
                int[] temp_this = new int[len1 - this_counter];
                int[] temp_h = new int[len2 - h_counter];
                //erasing the leading zeros if present
                for(int i = 0; i < len1 - this_counter; i++){
                    temp_this[i] = this.num[i + this_counter];
                }
                for(int i = 0; i < len2 - h_counter; i++){
                    temp_h[i] = h.num[i + h_counter];
                }

                //if this longer that means it larger in value
                if(temp_this.length > temp_h.length){
                    compare = -1;
                }
                //if h longer that mean it larger in value
                else if(temp_this.length < temp_h.length){
                    compare = 1;
                }
                //checks for the most significant numbers to see which one has the large significant number 
                else if(temp_this.length == temp_h.length){
                    for(int i = 0; i < temp_this.length; i++){
                        if(temp_this[i] > temp_h[i]){
                            compare = -1;
                            break;
                        }
                        else if(temp_this[i] < temp_h[i]){
                            compare = 1;
                            break;
                        }
                        else if(temp_this[i] == temp_h[i]){
                            compare = 0;
                        }
                    }
                }
            }
            else if(this.neg == 0 && h.neg == 0){
                //temps to hold the new array
                int[] temp_this = new int[len1 - this_counter];
                int[] temp_h = new int[len2 - h_counter];
                //erasing the leading zeros if present
                for(int i = 0; i < len1 - this_counter; i++){
                    temp_this[i] = this.num[i + this_counter];
                }
                for(int i = 0; i < len2 - h_counter; i++){
                    temp_h[i] = h.num[i + h_counter];
                }

                //if this longer that means it larger in value
                if(temp_this.length > temp_h.length){
                    compare = 1;
                }
                //if h longer that mean it larger in value
                else if(temp_this.length < temp_h.length){
                    compare = -1;
                }
                //checks for the most significant numbers to see which one has the large significant number 
                else if(temp_this.length == temp_h.length){
                    for(int i = 0; i < temp_this.length; i++){
                        if(temp_this[i] > temp_h[i]){
                            compare = 1;
                            break;
                        }
                        else if(temp_this[i] < temp_h[i]){
                            compare = -1;
                            break;
                        }
                        else if(temp_this[i] == temp_h[i]){
                            compare = 0;
                        }
                    }
                }
            }
        }
        return compare;
    }
    
    //returns a string type of an integer array
    public String toString(){
        String statement = "";
        int counter = 0;
        int len = this.num.length;
        
        //checks for leading zeros
        while(this.num[counter] == 0 && counter < len - 1){
            counter++;
        }
        if(counter == 0 && len == 1){
            counter = 0;
        }
        //skips the leading zeros which is counted by "counter"
        for(int i = counter; i < this.num.length; i++){
            if(this.neg == 0 && this.num[counter] < 0){
                this.num[counter] = this.num[counter] * -1;
            }
            else if(this.neg == 1 && this.num[counter] > 0){
                this.num[counter] = this.num[counter] * -1;
            }
            if(this.num[i] < 0 && i != counter){
                this.num[i] = this.num[i] * -1; 
            }
            statement = statement + Integer.toString(this.num[i]);
        }
        return statement;
    }
}
